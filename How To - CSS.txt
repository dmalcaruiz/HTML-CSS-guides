How To - Tabs:
    
Learn how to create tabs with CSS and JavaScript.
Tabs are perfect for single page web applications, or for web pages capable of displaying different subjects:

    Togglable Tabs:

        Step 1) Add HTML:

            <!-- Tab links -->
            <div class="tab">
              <button class="tablinks" onclick="openCity(event, 'London')">London</button>
              <button class="tablinks" onclick="openCity(event, 'Paris')">Paris</button>
              <button class="tablinks" onclick="openCity(event, 'Tokyo')">Tokyo</button>
            </div>

            <!-- Tab content -->
            <div id="London" class="tabcontent">
              <h3>London</h3>
              <p>London is the capital city of England.</p>
            </div>

            <div id="Paris" class="tabcontent">
              <h3>Paris</h3>
              <p>Paris is the capital of France.</p> 
            </div>

            <div id="Tokyo" class="tabcontent">
              <h3>Tokyo</h3>
              <p>Tokyo is the capital of Japan.</p>
            </div>

        Create buttons to open specific tab content. All <div> elements with class="tabcontent" are hidden by default (with CSS & JS). When the user clicks on a button - it will open the tab content that "matches" this button.

        Step 2) Add CSS:

        Style the buttons and the tab content:

            /* Style the tab */
            .tab {
                overflow: hidden;
                border: 1px solid #ccc;
                background-color: #f1f1f1;
            }

            /* Style the buttons that are used to open the tab content */
            .tab button {
                background-color: inherit;
                float: left;
                border: none;
                outline: none;
                cursor: pointer;
                padding: 14px 16px;
                transition: 0.3s;
            }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: #ccc;
            }

            /* Style the tab content */
            .tabcontent {
                display: none;
                padding: 6px 12px;
                border: 1px solid #ccc;
                border-top: none;
            }

        Step 3) Add JavaScript:

            function openCity(evt, cityName) {
                // Declare all variables
                var i, tabcontent, tablinks;

                // Get all elements with class="tabcontent" and hide them
                tabcontent = document.getElementsByClassName("tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }

                // Get all elements with class="tablinks" and remove the class "active"
                tablinks = document.getElementsByClassName("tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }

                // Show the current tab, and add an "active" class to the button that opened the tab
                document.getElementById(cityName).style.display = "block";
                evt.currentTarget.className += " active";
            }

    Fade in Tabs:

    If you want to fade in the tab content, add the following CSS:

            .tabcontent {
                animation: fadeEffect 1s; /* Fading effect takes 1 second */
            }

            /* Go from zero to full opacity */
            @keyframes fadeEffect {
                from {opacity: 0;}
                to {opacity: 1;}
            }

    Show a tab by default:

    To open a specific tab on page load, use JavaScript to "click" on the specified tab button:

            <button class="tablinks" onclick="openCity(event, 'London')" id="defaultOpen">London</button>

            <script>
            // Get the element with id="defaultOpen" and click on it
            document.getElementById("defaultOpen").click();
            </script>
            Close a tab
            If you want to close a specific tab, use JavaScript to hide the tab with a click of a button:


            <!-- Click on the <span> element to close the tab -->

            <div id="London" class="tabcontent">
              <h3>London</h3>
              <p>London is the capital city of England.</p>
              <span onclick="this.parentElement.style.display='none'">x</span> 
            </div>

How To - Dropdowns:
    
Learn how to create a hoverable dropdown menu with CSS.
A dropdown menu is a toggleable menu that allows the user to choose one value from a predefined list:

    Hoverable Dropdown:

    Create a dropdown menu that appears when the user moves the mouse over an element.

            Step 1) Add HTML:

                <div class="dropdown">
                  <button class="dropbtn">Dropdown</button>
                  <div class="dropdown-content">
                    <a href="#">Link 1</a>
                    <a href="#">Link 2</a>
                    <a href="#">Link 3</a>
                  </div>
                </div>

                Example Explained:

                Use any element to open the dropdown menu, e.g. a <button>, <a> or <p> element.
                Use a container element (like <div>) to create the dropdown menu and add the dropdown links inside it.
                Wrap a <div> element around the button and the <div> to position the dropdown menu correctly with CSS.

            Step 2) Add CSS:

                /* Dropdown Button */
                .dropbtn {
                    background-color: #4CAF50;
                    color: white;
                    padding: 16px;
                    font-size: 16px;
                    border: none;
                }

                /* The container <div> - needed to position the dropdown content */
                .dropdown {
                    position: relative;
                    display: inline-block;
                }

                /* Dropdown Content (Hidden by Default) */
                .dropdown-content {
                    display: none;
                    position: absolute;
                    background-color: #f1f1f1;
                    min-width: 160px;
                    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
                    z-index: 1;
                }

                /* Links inside the dropdown */
                .dropdown-content a {
                    color: black;
                    padding: 12px 16px;
                    text-decoration: none;
                    display: block;
                }

                /* Change color of dropdown links on hover */
                .dropdown-content a:hover {background-color: #ddd}

                /* Show the dropdown menu on hover */
                .dropdown:hover .dropdown-content {
                    display: block;
                }

                /* Change the background color of the dropdown button when the dropdown content is shown */
                .dropdown:hover .dropbtn {
                    background-color: #3e8e41;
                }

        Example Explained:

        We have styled the dropdown button with a background-color, padding, etc.

        The .dropdown class uses position:relative, which is needed when we want the dropdown content to be placed right below the dropdown button (using position:absolute).

        The .dropdown-content class holds the actual dropdown menu. It is hidden by default, and will be displayed on hover (see below). Note the min-width is set to 160px. Feel free to change this. Tip: If you want the width of the dropdown content to be as wide as the dropdown button, set the width to 100% (and overflow:auto to enable scroll on small screens).

        Instead of using a border, we have used the box-shadow property to make the dropdown menu look like a "card". We also use z-index to place the dropdown in front of other elements.

        The :hover selector is used to show the dropdown menu when the user moves the mouse over the dropdown button.

How To - Accordions:
    
Learn how to create an accordion (collapsible content).
Accordions are useful when you want to toggle between hiding and showing large amount of content:

    Accordion:

        Step 1) Add HTML:

            <button class="accordion">Section 1</button>
            <div class="panel">
              <p>Lorem ipsum...</p>
            </div>

            <button class="accordion">Section 2</button>
            <div class="panel">
              <p>Lorem ipsum...</p>
            </div>

            <button class="accordion">Section 3</button>
            <div class="panel">
              <p>Lorem ipsum...</p>
            </div>

        Step 2) Add CSS:

        Style the accordion:

            /* Style the buttons that are used to open and close the accordion panel */
            .accordion {
                background-color: #eee;
                color: #444;
                cursor: pointer;
                padding: 18px;
                width: 100%;
                text-align: left;
                border: none;
                outline: none;
                transition: 0.4s;
            }

            /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
            .active, .accordion:hover {
                background-color: #ccc;
            }

            /* Style the accordion panel. Note: hidden by default */
            .panel {
                padding: 0 18px;
                background-color: white;
                display: none;
                overflow: hidden;
            }

        Step 3) Add JavaScript:

            var acc = document.getElementsByClassName("accordion");
            var i;

            for (i = 0; i < acc.length; i++) {
                acc[i].addEventListener("click", function() {
                    /* Toggle between adding and removing the "active" class,
                    to highlight the button that controls the panel */
                    this.classList.toggle("active");

                    /* Toggle between hiding and showing the active panel */
                    var panel = this.nextElementSibling;
                    if (panel.style.display === "block") {
                        panel.style.display = "none";
                    } else {
                        panel.style.display = "block";
                    }
                });
            }

    Animated Accordion (Slide Down):

    To make an animated accordion, add max-height: 0, overflow: hidden and a transition for the max-height property, to the panel class.
    Then, use JavaScript to slide down the content by setting a calculated max-height, depending on the panel's height on different screen sizes:

        <style>
        .panel {
            padding: 0 18px;
            background-color: white;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.2s ease-out;
        }
        </style>

        <script>
        var acc = document.getElementsByClassName("accordion");
        var i;

        for (i = 0; i < acc.length; i++) {
          acc[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var panel = this.nextElementSibling;
            if (panel.style.maxHeight){
              panel.style.maxHeight = null;
            } else {
              panel.style.maxHeight = panel.scrollHeight + "px";
            } 
          });
        }
        </script>

    Add Icons:

    Add a symbol to each button to indicate whether the collapsible content is open or closed:

        .accordion:after {
            content: '\02795'; /* Unicode character for "plus" sign (+) */
            font-size: 13px;
            color: #777;
            float: right;
            margin-left: 5px;
        }

        .active:after {
            content: "\2796"; /* Unicode character for "minus" sign (-) */
        }

How To - Weight converter:

Learn how to create a weight converter with HTML and JavaScript.

    Weight Converter:

    Type a value in any of the fields to convert between weight measurements:
    Create an input element that can convert a value from one weight measurement to another.

        Step 1) Add HTML:

            <p>
              <label>Pounds</label>
              <input id="inputPounds" type="number" placeholder="Pounds"
              oninput="weightConverter(this.value)" onchange="weightConverter(this.value)">
            </p>
            <p>Grams: <span id="outputGrams"></span></p>
            Step 2) Add JavaScript:
            Example - Pounds to Kilogram
            /* When the input field receives input, convert the value from pounds to kilograms */
            function weightConverter(valNum) {
              document.getElementById("outputGrams").innerHTML = valNum / 0.0022046;
            }

        Description	Formula:

            Convert from Kilograms to Pounds	lb=kg*2.2046	
            Convert from Kilograms to Ounces	oz=kg*35.274	
            Convert from Kilograms to Grams	g=kg*1000	
            Convert from Kilograms to Stones	st=kg*0.1574	

        Description	Formula:

            Convert from Grams to Pounds	lb=g*0.0022046	
            Convert from Grams to Kilograms	kg=g/1000	
            Convert from Grams to Ounces	oz=g*0.035274	
            Convert from Grams to Stones	st=g*0.00015747	


How To - Animated Buttons:
    
Learn how to animate buttons using CSS.

    Pressed effect on click:

        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>

            .button {
                padding: 15px 25px;
                font-size: 24px;
                text-align: center;
                cursor: pointer;
                outline: none;
                color: #fff;
                background-color: #4CAF50;
                border: none;
                border-radius: 15px;
                box-shadow: 0 9px #999;
            }

            .button:hover {
                background-color: #3e8e41;
            }

            .button:active {
                background-color: #3e8e41;
                box-shadow: 0 5px #666;
                transform: translateY(4px);
            }

            </style>
        </head>
        <body>
            <h2>Animated Buttons - "Pressed Effect"</h2>
            <button class="button">Click Me</button>
        </body>

    Add an arrow on hover:

        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>

                .button {
                    border-radius: 4px;
                    background-color: #f4511e;
                    border: none;
                    color: #FFFFFF;
                    text-align: center;
                    font-size: 28px;
                    padding: 20px;
                    width: 200px;
                    transition: all 0.5s;
                    cursor: pointer;
                    margin: 5px;
                }

                .button span {
                    cursor: pointer;
                    display: inline-block;
                    position: relative;
                    transition: 0.5s;
                }

                .button span:after {
                    content: '\00bb';
                    position: absolute;
                    opacity: 0;
                    top: 0;
                    right: -20px;
                    transition: 0.5s;
                }

                .button:hover span {
                    padding-right: 25px;
                }

                .button:hover span:after {
                    opacity: 1;
                    right: 0;
            }

            </style>
        </head>
        <body>
            <h2>Animated Button</h2>
            <button class="button"><span>Hover </span></button>
        </body>

How To - Side Navigation:
    
Learn how to create an animated, closable side navigation menu.

    Animated Side Navigation:

        Step 1) Add HTML:

            <div id="mySidenav" class="sidenav">
              <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
              <a href="#">About</a>
              <a href="#">Services</a>
              <a href="#">Clients</a>
              <a href="#">Contact</a>
            </div>

            <!-- Use any element to open the sidenav -->
            <span onclick="openNav()">open</span>

            <!-- Add all page content inside this div if you want the side nav to push page content to the right (not used if you only want the sidenav to sit on top of the page -->
            <div id="main">
              ...
            </div>

        Step 2) Add CSS:

            /* The side navigation menu */
            .sidenav {
                height: 100%; /* 100% Full-height */
                width: 0; /* 0 width - change this with JavaScript */
                position: fixed; /* Stay in place */
                z-index: 1; /* Stay on top */
                top: 0; /* Stay at the top */
                left: 0;
                background-color: #111; /* Black*/
                overflow-x: hidden; /* Disable horizontal scroll */
                padding-top: 60px; /* Place content 60px from the top */
                transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
            }

            /* The navigation menu links */
            .sidenav a {
                padding: 8px 8px 8px 32px;
                text-decoration: none;
                font-size: 25px;
                color: #818181;
                display: block;
                transition: 0.3s;
            }

            /* When you mouse over the navigation links, change their color */
            .sidenav a:hover {
                color: #f1f1f1;
            }

            /* Position and style the close button (top right corner) */
            .sidenav .closebtn {
                position: absolute;
                top: 0;
                right: 25px;
                font-size: 36px;
                margin-left: 50px;
            }

            /* Style page content - use this if you want to push the page content to the right when you open the side navigation */
            #main {
                transition: margin-left .5s;
                padding: 20px;
            }

            /* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size) */
            @media screen and (max-height: 450px) {
                .sidenav {padding-top: 15px;}
                .sidenav a {font-size: 18px;}
            }

        Step 3) Add JavaScript:

        The example below slides in the side navigation, and makes it 250px wide:

            Sidenav Overlay:

                /* Set the width of the side navigation to 250px */
                function openNav() {
                    document.getElementById("mySidenav").style.width = "250px";
                }

                /* Set the width of the side navigation to 0 */
                function closeNav() {
                    document.getElementById("mySidenav").style.width = "0";
                }

            The example below slides in the side navigation, and pushes the page content to the right (the value used to set the width of the sidenav is also used to set the left margin of the "page content"):

            Sidenav Push Content:

                /* Set the width of the side navigation to 250px and the left margin of the page content to 250px */
                function openNav() {
                    document.getElementById("mySidenav").style.width = "250px";
                    document.getElementById("main").style.marginLeft = "250px";
                }

                /* Set the width of the side navigation to 0 and the left margin of the page content to 0 */
                function closeNav() {
                    document.getElementById("mySidenav").style.width = "0";
                    document.getElementById("main").style.marginLeft = "0";
                }

            The example below also slides in the side navigation, and pushes the page content to the right, only this time, we add a black background color with a 40% opacity to the body element, to "highlight" the side navigation:

            Sidenav Push Content w/ opacity:

                /* Set the width of the side navigation to 250px and the left margin of the page content to 250px and add a black background color to body */
                function openNav() {
                    document.getElementById("mySidenav").style.width = "250px";
                    document.getElementById("main").style.marginLeft = "250px";
                    document.body.style.backgroundColor = "rgba(0,0,0,0.4)";
                }

                /* Set the width of the side navigation to 0 and the left margin of the page content to 0, and the background color of body to white */
                function closeNav() {
                    document.getElementById("mySidenav").style.width = "0";
                    document.getElementById("main").style.marginLeft = "0";
                    document.body.style.backgroundColor = "white";
                }

            The example below slides in the side navigation from the left and covers the whole page (100% width):

            Sidenav Full-width:

                /* Open the sidenav */
                function openNav() {
                    document.getElementById("mySidenav").style.width = "100%";
                }

                /* Close/hide the sidenav */
                function closeNav() {
                    document.getElementById("mySidenav").style.width = "0";
                }

            The example below opens and close the side navigation menu without animations:

            Sidenav without Animation:

                /* Open the sidenav */
                function openNav() {
                    document.getElementById("mySidenav").style.display = "block";
                }

                /* Close/hide the sidenav */
                function closeNav() {
                    document.getElementById("mySidenav").style.display = "none";
                }
                The example below shows how to create a right-sided navigation menu:

                Right-sided navigation:
                .sidenav {
                    right: 0;
                }

            The example below shows how to create a side navigation menu that is always shown (fixed):

            Always show sidenav:

                /* The sidenav */
                .sidenav {
                  height: 100%;
                  width: 200px;
                  position: fixed;
                  z-index: 1;
                  top: 0;
                  left: 0;
                  background-color: #111;
                  overflow-x: hidden;
                  padding-top: 20px;
                }

                /* Page content */
                .main {
                  margin-left: 200px; /* Same as the width of the sidenav */
                }

How To - Top Navigation:
    
Learn how to create a top navigation bar with CSS.

    Top Navigation Bar:

        Step 1) Add HTML:

            <div class="topnav">
              <a class="active" href="#home">Home</a>
              <a href="#news">News</a>
              <a href="#contact">Contact</a>
              <a href="#about">About</a>
            </div>

        Step 2) Add CSS:

            /* Add a black background color to the top navigation */
            .topnav {
                background-color: #333;
                overflow: hidden;
            }

            /* Style the links inside the navigation bar */
            .topnav a {
                float: left;
                color: #f2f2f2;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
                font-size: 17px;
            }

            /* Change the color of links on hover */
            .topnav a:hover {
                background-color: #ddd;
                color: black;
            }

            /* Add a color to the active/current link */
            .topnav a.active {
                background-color: #4CAF50;
                color: white;
            }

How To - Modal Boxes:
    
Learn how to create a Modal Box with CSS and JavaScript.

    Modal Box:

    A modal is a dialog box/popup window that is displayed on top of the current page:

        Step 1) Add HTML:

            <!-- Trigger/Open The Modal -->
            <button id="myBtn">Open Modal</button>

            <!-- The Modal -->
            <div id="myModal" class="modal">

              <!-- Modal content -->
              <div class="modal-content">
                <span class="close">&times;</span>
                <p>Some text in the Modal..</p>
              </div>

            </div>

        Step 2) Add CSS:

            /* The Modal (background) */
            .modal {
                display: none; /* Hidden by default */
                position: fixed; /* Stay in place */
                z-index: 1; /* Sit on top */
                left: 0;
                top: 0;
                width: 100%; /* Full width */
                height: 100%; /* Full height */
                overflow: auto; /* Enable scroll if needed */
                background-color: rgb(0,0,0); /* Fallback color */
                background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            }

            /* Modal Content/Box */
            .modal-content {
                background-color: #fefefe;
                margin: 15% auto; /* 15% from the top and centered */
                padding: 20px;
                border: 1px solid #888;
                width: 80%; /* Could be more or less, depending on screen size */
            }

            /* The Close Button */
            .close {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
            }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }

        Step 3) Add JavaScript:

            // Get the modal
            var modal = document.getElementById('myModal');

            // Get the button that opens the modal
            var btn = document.getElementById("myBtn");

            // Get the <span> element that closes the modal
            var span = document.getElementsByClassName("close")[0];

            // When the user clicks on the button, open the modal 
            btn.onclick = function() {
                modal.style.display = "block";
            }

            // When the user clicks on <span> (x), close the modal
            span.onclick = function() {
                modal.style.display = "none";
            }

            // When the user clicks anywhere outside of the modal, close it
            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }

    Add Header and Footer:

    Add a class for modal-header, modal-body and modal-footer:

        <!-- Modal content -->
        <div class="modal-content">
          <div class="modal-header">
            <span class="close">&times;</span>
            <h2>Modal Header</h2>
          </div>
          <div class="modal-body">
            <p>Some text in the Modal Body</p>
            <p>Some other text...</p>
          </div>
          <div class="modal-footer">
            <h3>Modal Footer</h3>
          </div>
        </div>

    Style the modal header, body and footer, and add animation (slide in the modal):

        /* Modal Header */
        .modal-header {
            padding: 2px 16px;
            background-color: #5cb85c;
            color: white;
        }

        /* Modal Body */
        .modal-body {padding: 2px 16px;}

        /* Modal Footer */
        .modal-footer {
            padding: 2px 16px;
            background-color: #5cb85c;
            color: white;
        }

        /* Modal Content */
        .modal-content {
            position: relative;
            background-color: #fefefe;
            margin: auto;
            padding: 0;
            border: 1px solid #888;
            width: 80%;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
            animation-name: animatetop;
            animation-duration: 0.4s
        }

        /* Add Animation */
        @keyframes animatetop {
            from {top: -300px; opacity: 0}
            to {top: 0; opacity: 1}
        }

How To - Progress Bars:

Learn how to create a Progress Bar with CSS and JavaScript.

    Progress Bar:

    Step 1) Add HTML:

        <div id="myProgress">
          <div id="myBar"></div>
        </div>
        Step 2) Add CSS:

        #myProgress {
            width: 100%;
            background-color: grey;
        }
        #myBar {
            width: 1%;
            height: 30px;
            background-color: green;
        }

    Step 3) Add JavaScript:

        Create a Dynamic Progress Bar (animated) Using JavaScript:


            function move() {
                var elem = document.getElementById("myBar"); 
                var width = 1;
                var id = setInterval(frame, 10);
                function frame() {
                    if (width >= 100) {
                        clearInterval(id);
                    } else {
                        width++; 
                        elem.style.width = width + '%'; 
                    }
                }
            }

        Add Labels:

        If you want to add labels to indicate how far the user is in the process, add a new element inside (or outside) the progress bar:

            Step 1) Add HTML:

                <div id="myProgress">
                  <div id="myBar">10%</div>
                </div>

            Step 2) Add CSS:

                #myBar {
                    width: 10%;
                    height: 30px;
                    background-color: #4CAF50;
                    text-align: center; /* To center it horizontally (if you want) */
                    line-height: 30px; /* To center it vertically */
                    color: white; 
                }

        Step 3) Add JavaScript:

        If you want to dynamically update the text inside the label to the same value of the width of the progress bar, add the following:


            function move() {
                var elem = document.getElementById("myBar"); 
                var width = 10;
                var id = setInterval(frame, 10);
                function frame() {
                    if (width >= 100) {
                        clearInterval(id);
                    } else {
                        width++; 
                        elem.style.width = width + '%'; 
                        elem.innerHTML = width * 1 + '%';
                    }
                }
            }

How To - Parallax:
    
Learn how to create a "parallax" scrolling effect with CSS.

    Parallax:

    Parallax scrolling is a web site trend where the background content (i.e. an image) is moved at a different speed than the foreground content while scrolling. Click on the links below to see the difference between a website with and without parallax scrolling.

    Note: Parallax scrolling does not always work on mobile devices/smart phones. However, you can use media queries to turn off the effect on mobile devices (see last example on this page).

    How To Create a Parallax Scrolling Effect:

    Use a container element and add a background image to the container with a specific height. Then use the background-attachment: fixed to create the actual parallax effect. The other background properties are used to center and scale the image perfectly:

        Pixels:

            <style>
            .parallax { 
                /* The image used */
                background-image: url("img_parallax.jpg");

                /* Set a specific height */
                height: 500px; 

                /* Create the parallax scrolling effect */
                background-attachment: fixed;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
            }
            </style>

            <!-- Container element -->
            <div class="parallax"></div>

        The example above used pixels to set the height of the image. If you want to use percent, for example 100%, to make the image fit the whole screen, set the height of the parallax container to 100%. Note: You must also apply height: 100% to both <html> and <body>:

        Percent:

            body, html {
                height: 100%;
            }

            .parallax { 
                /* The image used */
                background-image: url("img_parallax.jpg");

                /* Full height */
                height: 100%; 

                /* Create the parallax scrolling effect */
                background-attachment: fixed;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
            }

        Some mobile devices have a problem with background-attachment: fixed. However, you can use media queries to turn off the parallax effect for mobile devices:

            /* Turn off parallax scrolling for all tablets and phones. Increase/decrease the pixels if needed */
            @media only screen and (max-device-width: 1366px) {
                .parallax {
                    background-attachment: scroll;
                }
            }

How To - Login Form:
    
Learn how to create a responsive login form with CSS.

    Login Form:

        Step 1) Add HTML:

            Add an image inside a container and add inputs (with a matching label) for each field. Wrap a <form> element around them to process the input. You can learn more about how to process input in our PHP tutorial.


                <form action="action_page.php">
                  <div class="imgcontainer">
                    <img src="img_avatar2.png" alt="Avatar" class="avatar">
                  </div>

                  <div class="container">
                    <label for="uname"><b>Username</b></label>
                    <input type="text" placeholder="Enter Username" name="uname" required>

                    <label for="psw"><b>Password</b></label>
                    <input type="password" placeholder="Enter Password" name="psw" required>

                    <button type="submit">Login</button>
                    <label>
                      <input type="checkbox" checked="checked" name="remember"> Remember me
                    </label>
                  </div>

                  <div class="container" style="background-color:#f1f1f1">
                    <button type="button" class="cancelbtn">Cancel</button>
                    <span class="psw">Forgot <a href="#">password?</a></span>
                  </div>
                </form>

        Step 2) Add CSS:

            /* Bordered form */
            form {
                border: 3px solid #f1f1f1;
            }

            /* Full-width inputs */
            input[type=text], input[type=password] {
                width: 100%;
                padding: 12px 20px;
                margin: 8px 0;
                display: inline-block;
                border: 1px solid #ccc;
                box-sizing: border-box;
            }

            /* Set a style for all buttons */
            button {
                background-color: #4CAF50;
                color: white;
                padding: 14px 20px;
                margin: 8px 0;
                border: none;
                cursor: pointer;
                width: 100%;
            }

            /* Add a hover effect for buttons */
            button:hover {
                opacity: 0.8;
            }

            /* Extra style for the cancel button (red) */
            .cancelbtn {
                width: auto;
                padding: 10px 18px;
                background-color: #f44336;
            }

            /* Center the avatar image inside this container */
            .imgcontainer {
                text-align: center;
                margin: 24px 0 12px 0;
            }

            /* Avatar image */
            img.avatar {
                width: 40%;
                border-radius: 50%;
            }

            /* Add padding to containers */
            .container {
                padding: 16px;
            }

            /* The "Forgot password" text */
            span.psw {
                float: right;
                padding-top: 16px;
            }

            /* Change styles for span and cancel button on extra small screens */
            @media screen and (max-width: 300px) {
                span.psw {
                    display: block;
                    float: none;
                }
                .cancelbtn {
                    width: 100%;
                }
            }

    Modal Login Form:

        Step 1) Add HTML:

            <!-- Button to open the modal login form -->
            <button onclick="document.getElementById('id01').style.display='block'">Login</button>

            <!-- The Modal -->
            <div id="id01" class="modal">
              <span onclick="document.getElementById('id01').style.display='none'" 
            class="close" title="Close Modal">&times;</span>

              <!-- Modal Content -->
              <form class="modal-content animate" action="/action_page.php">
                <div class="imgcontainer">
                  <img src="img_avatar2.png" alt="Avatar" class="avatar">
                </div>

                <div class="container">
                  <label for="uname"><b>Username</b></label>
                  <input type="text" placeholder="Enter Username" name="uname" required>

                  <label for="psw"><b>Password</b></label>
                  <input type="password" placeholder="Enter Password" name="psw" required>

                  <button type="submit">Login</button>
                  <label>
                    <input type="checkbox" checked="checked" name="remember"> Remember me
                  </label>
                </div>

                <div class="container" style="background-color:#f1f1f1">
                  <button type="button" onclick="document.getElementById('id01').style.display='none'" class="cancelbtn">Cancel</button>
                  <span class="psw">Forgot <a href="#">password?</a></span>
                </div>
              </form>
            </div>

        Step 2) Add CSS:

            /* The Modal (background) */
            .modal {
                display: none; /* Hidden by default */
                position: fixed; /* Stay in place */
                z-index: 1; /* Sit on top */
                left: 0;
                top: 0;
                width: 100%; /* Full width */
                height: 100%; /* Full height */

                overflow: auto; /* Enable scroll if needed */
                background-color: rgb(0,0,0); /* Fallback color */
                background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
                padding-top: 60px;
            }

            /* Modal Content/Box */
            .modal-content {
                background-color: #fefefe;
                margin: 5px auto; /* 15% from the top and centered */
                border: 1px solid #888;
                width: 80%; /* Could be more or less, depending on screen size */
            }

            /* The Close Button */
            .close {
                /* Position it in the top right corner outside of the modal */
                position: absolute;
                right: 25px;
                top: 0; 
                color: #000;
                font-size: 35px;
                font-weight: bold;
            }

            /* Close button on hover */
            .close:hover,
            .close:focus {
                color: red;
                cursor: pointer;
            }

            /* Add Zoom Animation */
            .animate {
                -webkit-animation: animatezoom 0.6s;
                animation: animatezoom 0.6s
            }

            @-webkit-keyframes animatezoom {
                from {-webkit-transform: scale(0)} 
                to {-webkit-transform: scale(1)}
            }

            @keyframes animatezoom {
                from {transform: scale(0)} 
                to {transform: scale(1)}
            }

        Tip: You can also use the following javascript to close the modal by clicking outside of the modal content (and not just by using the "x" or "cancel" button to close it):

            <script>
            // Get the modal
            var modal = document.getElementById('id01');

            // When the user clicks anywhere outside of the modal, close it
            window.onclick = function(event) {
                if (event.target == modal) {
                    modal.style.display = "none";
                }
            }
            </script>

How To - HTML Includes:

Learn how to include HTML snippets in HTML.

Save the HTML you want to include in an .html file:

    content.html
    <a href="howto_google_maps.asp">Google Maps</a><br>
    <a href="howto_css_animate_buttons.asp">Animated Buttons</a><br>
    <a href="howto_css_modals.asp">Modal Boxes</a><br>
    <a href="howto_js_animate.asp">Animations</a><br>
    <a href="howto_js_progressbar.asp">Progress Bars</a><br>
    <a href="howto_css_dropdown.asp">Hover Dropdowns</a><br>
    <a href="howto_js_dropdown.asp">Click Dropdowns</a><br>
    <a href="howto_css_table_responsive.asp">Responsive Tables</a><br>

    Include the HTML:

    Including HTML is done by using a w3-include-html attribute:

        <div w3-include-html="content.html"></div>
        Add the JavaScript

    HTML includes are done by JavaScript.

        <script>
        function includeHTML() {
          var z, i, elmnt, file, xhttp;
          /*loop through a collection of all HTML elements:*/
          z = document.getElementsByTagName("*");
          for (i = 0; i < z.length; i++) {
            elmnt = z[i];
            /*search for elements with a certain atrribute:*/
            file = elmnt.getAttribute("w3-include-html");
            if (file) {
              /*make an HTTP request using the attribute value as the file name:*/
              xhttp = new XMLHttpRequest();
              xhttp.onreadystatechange = function() {
                if (this.readyState == 4) {
                  if (this.status == 200) {elmnt.innerHTML = this.responseText;}
                  if (this.status == 404) {elmnt.innerHTML = "Page not found.";}
                  /*remove the attribute, and call this function once more:*/
                  elmnt.removeAttribute("w3-include-html");
                  includeHTML();
                }
              } 
              xhttp.open("GET", file, true);
              xhttp.send();
              /*exit the function:*/
              return;
            }
          }
        }
        </script>

    Call includeHTML() at the bottom of the page:

        <script>
        includeHTML();
        </script>

    You can include any number of HTML snippets:

        <div w3-include-html="h1.html"></div> 
        <div w3-include-html="content.html"></div>
    
How To - Google Maps:

Learn how to add a Google Map to a web page.

    Start with a simple basic web page.
    Add a <div> element where you want the map to display:

        <!DOCTYPE html>
        <html>
        <body>

        <h1>My First Google Map</h1>

        <div id="map">My map will go here</div>

        </body>
        <html>
        Set the size of the map:


        <div id="map" style="width:100%;height:400px;">

    Create a JavaScript function to display the map:

        function myMap() {
            var mapCanvas = document.getElementById("map");
            var mapOptions = {
                center: new google.maps.LatLng(51.5, -0.2),
                zoom: 10
            };
            var map = new google.maps.Map(mapCanvas, mapOptions);
        }

    The mapCanvas variable is the map's HTML element.

    The mapOptions variable defines the properties for the map.

    The center property specifies where to center the map (using latitude and longitude coordinates).

    The zoom property specifies the zoom level for the map (try to experiment with the zoom level).

    The google.maps.Map object is created with mapCanvas and mapOptions as parameters.

    Add the Google API:

    The functionality of the map is provided by a JavaScript library located at Google:

        <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&callback=myMap"></script>

How To - Range Sliders:

Learn how to create custom range sliders with CSS and JavaScript.

    Range Slider:

        Step 1) Add HTML:

            <div class="slidecontainer">
              <input type="range" min="1" max="100" value="50" class="slider" id="myRange">
            </div>

        Step 2) Add CSS:

            .slidecontainer {
                width: 100%; /* Width of the outside container */
            }

            /* The slider itself */
            .slider {
                -webkit-appearance: none;  /* Override default CSS styles */
                appearance: none;
                width: 100%; /* Full-width */
                height: 25px; /* Specified height */
                background: #d3d3d3; /* Grey background */
                outline: none; /* Remove outline */
                opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
                -webkit-transition: .2s; /* 0.2 seconds transition on hover */
                transition: opacity .2s;
            }

            /* Mouse-over effects */
            .slider:hover {
                opacity: 1; /* Fully shown on mouse-over */
            }

            /* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */ 
            .slider::-webkit-slider-thumb {
                -webkit-appearance: none; /* Override default look */
                appearance: none;
                width: 25px; /* Set a specific slider handle width */
                height: 25px; /* Slider handle height */
                background: #4CAF50; /* Green background */
                cursor: pointer; /* Cursor on hover */
            }

            .slider::-moz-range-thumb {
                width: 25px; /* Set a specific slider handle width */
                height: 25px; /* Slider handle height */
                background: #4CAF50; /* Green background */
                cursor: pointer; /* Cursor on hover */
            }

        Step 3) Add JavaScript:

        Create a dynamic range slider to display the current value, with JavaScript:

            var slider = document.getElementById("myRange");
            var output = document.getElementById("demo");
            output.innerHTML = slider.value; // Display the default slider value

            // Update the current slider value (each time you drag the slider handle)
            slider.oninput = function() {
                output.innerHTML = this.value;
            }

    Round Slider:

    To create a round slider handle, use the border-radius property. Tip: Set the height of the slider to a different value than the slider thumbs if you want unequal heights (15px vs. 25px in this example):

        .slider {
            -webkit-appearance: none;
            width: 100%;
            height: 15px;
            border-radius: 5px;   
            background: #d3d3d3;
            outline: none;
            opacity: 0.7;
            -webkit-transition: .2s;
            transition: opacity .2s;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%; 
            background: #4CAF50;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }

    Slider Icon/Image:

    To create a slider handle icon/image, use the background property and insert an image url:

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 23px;
            height: 24px;
            border: 0;
            background: url('contrasticon.png');
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 23px;
            height: 25px;
            border: 0;
            background: url('contrasticon.png');
            cursor: pointer;
        }

    
How To - Tooltips:

Learn how to create tooltips with CSS.

    Step 1) Add HTML:

        <div class="tooltip">Hover over me
          <span class="tooltiptext">Tooltip text</span>
        </div>

    Step 2) Add CSS:

        /* Tooltip container */
        .tooltip {
            position: relative;
            display: inline-block;
            border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
        }

        /* Tooltip text */
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 120px;
            background-color: #555;
            color: #fff;
            text-align: center;
            padding: 5px 0;
            border-radius: 6px;

            /* Position the tooltip text */
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;

            /* Fade in tooltip */
            opacity: 0;
            transition: opacity 0.3s;
        }

        /* Tooltip arrow */
        .tooltip .tooltiptext::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #555 transparent transparent transparent;
        }

        /* Show the tooltip text when you mouse over the tooltip container */
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

    Tip: Modals are also similar to tooltips.

How To - Slideshow:
    
Learn how to create a responsive slideshow with CSS and JavaScript.

    Slideshow / Carousel:
    A slideshow is used to cycle through elements:

        Step 1) Add HTML:

            <!-- Slideshow container -->
            <div class="slideshow-container">

              <!-- Full-width images with number and caption text -->
              <div class="mySlides fade">
                <div class="numbertext">1 / 3</div>
                <img src="img1.jpg" style="width:100%">
                <div class="text">Caption Text</div>
              </div>

              <div class="mySlides fade">
                <div class="numbertext">2 / 3</div>
                <img src="img2.jpg" style="width:100%">
                <div class="text">Caption Two</div>
              </div>

              <div class="mySlides fade">
                <div class="numbertext">3 / 3</div>
                <img src="img3.jpg" style="width:100%">
                <div class="text">Caption Three</div>
              </div>

              <!-- Next and previous buttons -->
              <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
              <a class="next" onclick="plusSlides(1)">&#10095;</a>
            </div>
            <br>

            <!-- The dots/circles -->
            <div style="text-align:center">
              <span class="dot" onclick="currentSlide(1)"></span> 
              <span class="dot" onclick="currentSlide(2)"></span> 
              <span class="dot" onclick="currentSlide(3)"></span> 
            </div>

        Step 2) Add CSS:

        Style the next and previous buttons, the caption text and the dots:


            * {box-sizing:border-box}

            /* Slideshow container */
            .slideshow-container {
              max-width: 1000px;
              position: relative;
              margin: auto;
            }

            /* Hide the images by default */
            .mySlides {
                display: none;
            }

            /* Next & previous buttons */
            .prev, .next {
              cursor: pointer;
              position: absolute;
              top: 50%;
              width: auto;
              margin-top: -22px;
              padding: 16px;
              color: white;
              font-weight: bold;
              font-size: 18px;
              transition: 0.6s ease;
              border-radius: 0 3px 3px 0;
            }

            /* Position the "next button" to the right */
            .next {
              right: 0;
              border-radius: 3px 0 0 3px;
            }

            /* On hover, add a black background color with a little bit see-through */
            .prev:hover, .next:hover {
              background-color: rgba(0,0,0,0.8);
            }

            /* Caption text */
            .text {
              color: #f2f2f2;
              font-size: 15px;
              padding: 8px 12px;
              position: absolute;
              bottom: 8px;
              width: 100%;
              text-align: center;
            }

            /* Number text (1/3 etc) */
            .numbertext {
              color: #f2f2f2;
              font-size: 12px;
              padding: 8px 12px;
              position: absolute;
              top: 0;
            }

            /* The dots/bullets/indicators */
            .dot {
              cursor:pointer;
              height: 15px;
              width: 15px;
              margin: 0 2px;
              background-color: #bbb;
              border-radius: 50%;
              display: inline-block;
              transition: background-color 0.6s ease;
            }

            .active, .dot:hover {
              background-color: #717171;
            }

            /* Fading animation */
            .fade {
              -webkit-animation-name: fade;
              -webkit-animation-duration: 1.5s;
              animation-name: fade;
              animation-duration: 1.5s;
            }

            @-webkit-keyframes fade {
              from {opacity: .4} 
              to {opacity: 1}
            }

            @keyframes fade {
              from {opacity: .4} 
              to {opacity: 1}
            }

        Step 3) Add JavaScript:

            var slideIndex = 1;
            showSlides(slideIndex);

            // Next/previous controls
            function plusSlides(n) {
              showSlides(slideIndex += n);
            }

            // Thumbnail image controls
            function currentSlide(n) {
              showSlides(slideIndex = n);
            }

            function showSlides(n) {
              var i;
              var slides = document.getElementsByClassName("mySlides");
              var dots = document.getElementsByClassName("dot");
              if (n > slides.length) {slideIndex = 1} 
              if (n < 1) {slideIndex = slides.length}
              for (i = 0; i < slides.length; i++) {
                  slides[i].style.display = "none"; 
              }
              for (i = 0; i < dots.length; i++) {
                  dots[i].className = dots[i].className.replace(" active", "");
              }
              slides[slideIndex-1].style.display = "block"; 
              dots[slideIndex-1].className += " active";
            }

    Automatic Slideshow:

    To display an automatic slideshow, use the following code:

        var slideIndex = 0;
        showSlides();

        function showSlides() {
            var i;
            var slides = document.getElementsByClassName("mySlides");
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none"; 
            }
            slideIndex++;
            if (slideIndex > slides.length) {slideIndex = 1} 
            slides[slideIndex-1].style.display = "block"; 
            setTimeout(showSlides, 2000); // Change image every 2 seconds
        }

    Multiple Slideshows:

        var slideIndex = [1,1];
        /* Class the members of each slideshow group with different CSS classes */
        var slideId = ["mySlides1", "mySlides2"] 
        showSlides(1, 0);
        showSlides(1, 1);

        function plusSlides(n, no) {
          showSlides(slideIndex[no] += n, no);
        }

        function showSlides(n, no) {
          var i;
          var x = document.getElementsByClassName(slideId[no]);
          if (n > x.length) {slideIndex[no] = 1} 
          if (n < 1) {slideIndex[no] = x.length}
          for (i = 0; i < x.length; i++) {
            x[i].style.display = "none"; 
          }
          x[slideIndex[no]-1].style.display = "block"; 
        }

How To - Filter List:

    Learn how to use JavaScript to search for items in a list.

        Search List:

            Step 1) Add HTML:

                <input type="text" id="myInput" onkeyup="myFunction()" placeholder="Search for names..">

                <ul id="myUL">
                  <li><a href="#">Adele</a></li>
                  <li><a href="#">Agnes</a></li>

                  <li><a href="#">Billy</a></li>
                  <li><a href="#">Bob</a></li>

                  <li><a href="#">Calvin</a></li>
                  <li><a href="#">Christina</a></li>
                  <li><a href="#">Cindy</a></li>
                </ul>

        Note: We use href="#" in this demo since we do not have a page to link it to. In real life this should be a real URL to a specific page.

            Step 2) Add CSS:
            Style the input element and the list:

                #myInput {
                    background-image: url('/css/searchicon.png'); /* Add a search icon to input */
                    background-position: 10px 12px; /* Position the search icon */
                    background-repeat: no-repeat; /* Do not repeat the icon image */
                    width: 100%; /* Full-width */
                    font-size: 16px; /* Increase font-size */
                    padding: 12px 20px 12px 40px; /* Add some padding */
                    border: 1px solid #ddd; /* Add a grey border */
                    margin-bottom: 12px; /* Add some space below the input */
                }

                #myUL {
                    /* Remove default list styling */
                    list-style-type: none;
                    padding: 0;
                    margin: 0;
                }

                #myUL li a {
                    border: 1px solid #ddd; /* Add a border to all links */
                    margin-top: -1px; /* Prevent double borders */
                    background-color: #f6f6f6; /* Grey background color */
                    padding: 12px; /* Add some padding */
                    text-decoration: none; /* Remove default text underline */
                    font-size: 18px; /* Increase the font-size */
                    color: black; /* Add a black text color */
                    display: block; /* Make it into a block element to fill the whole list */
                }

                #myUL li a:hover:not(.header) {
                    background-color: #eee; /* Add a hover effect to all links, except for headers */
                }

            Step 3) Add JavaScript:

                <script>
                function myFunction() {
                    // Declare variables
                    var input, filter, ul, li, a, i;
                    input = document.getElementById('myInput');
                    filter = input.value.toUpperCase();
                    ul = document.getElementById("myUL");
                    li = ul.getElementsByTagName('li');

                    // Loop through all list items, and hide those who don't match the search query
                    for (i = 0; i < li.length; i++) {
                        a = li[i].getElementsByTagName("a")[0];
                        if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {
                            li[i].style.display = "";
                        } else {
                            li[i].style.display = "none";
                        }
                    }
                }
                </script>

            Tip: Remove toUpperCase() if you want to perform a case-sensitive search.
    
How To - Sort List:

Learn how to sort an HTML list, using JavaScript.

    Sort Function:

        <ul id="id01">
          <li>Oslo</li>
          <li>Stockholm</li>
          <li>Helsinki</li>
          <li>Berlin</li>
          <li>Rome</li>
          <li>Madrid</li>
        </ul>

        <script>
        function sortList() {
          var list, i, switching, b, shouldSwitch;
          list = document.getElementById("id01");
          switching = true;
          /* Make a loop that will continue until
          no switching has been done: */
          while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            b = list.getElementsByTagName("LI");
            // Loop through all list items:
            for (i = 0; i < (b.length - 1); i++) {
              // Start by saying there should be no switching:
              shouldSwitch = false;
              /* Check if the next item should
              switch place with the current item: */
              if (b[i].innerHTML.toLowerCase() > b[i + 1].innerHTML.toLowerCase()) {
                /* If next item is alphabetically lower than current item,
                mark as a switch and break the loop: */
                shouldSwitch= true;
                break;
              }
            }
            if (shouldSwitch) {
              /* If a switch has been marked, make the switch
              and mark the switch as done: */
              b[i].parentNode.insertBefore(b[i + 1], b[i]);
              switching = true;
            }
          }
        }
        </script>

    Sorting Ascending and Descending:

    The first time you click the button, the sorting direction is ascending (A to Z).

        <ul id="id01">
          <li>Oslo</li>
          <li>Stockholm</li>
          <li>Helsinki</li>
          <li>Berlin</li>
          <li>Rome</li>
          <li>Madrid</li>
        </ul>

        <script>
        function sortListDir() {
          var list, i, switching, b, shouldSwitch, dir, switchcount = 0;
          list = document.getElementById("id01");
          switching = true;
          // Set the sorting direction to ascending:
          dir = "asc"; 
          // Make a loop that will continue until no switching has been done:
          while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            b = list.getElementsByTagName("LI");
            // Loop through all list-items:
            for (i = 0; i < (b.length - 1); i++) {
              // Start by saying there should be no switching:
              shouldSwitch = false;
              /* Check if the next item should switch place with the current item,
              based on the sorting direction (asc or desc): */
              if (dir == "asc") {
                if (b[i].innerHTML.toLowerCase() > b[i + 1].innerHTML.toLowerCase()) {
                  /* If next item is alphabetically lower than current item,
                  mark as a switch and break the loop: */
                  shouldSwitch= true;
                  break;
                }
              } else if (dir == "desc") {
                if (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {
                  /* If next item is alphabetically higher than current item,
                  mark as a switch and break the loop: */
                  shouldSwitch= true;
                  break;
                }
              }
            }
            if (shouldSwitch) {
              /* If a switch has been marked, make the switch
              and mark that a switch has been done: */
              b[i].parentNode.insertBefore(b[i + 1], b[i]);
              switching = true;
              // Each time a switch is done, increase switchcount by 1:
              switchcount ++;
            } else {
              /* If no switching has been done AND the direction is "asc",
              set the direction to "desc" and run the while loop again. */
              if (switchcount == 0 && dir == "asc") {
                dir = "desc";
                switching = true;
              }
            }
          }
        }
        </script>